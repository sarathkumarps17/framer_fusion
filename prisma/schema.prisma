// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String    @unique
  avatar           String?
  password         String
  token            String?
  isVerified       Boolean
  createAt         DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  onCartProductIds String[]  @db.ObjectId
  onCartProducts   Product[] @relation("productsOnCart", fields: [onCartProductIds], references: [id])
  reviews          Review[]
  order            Order[]
  wallet           Wallet?   @relation(fields: [walletId], references: [id])
  walletId         String?   @unique @db.ObjectId
}

model Product {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  price          Float
  stock          Int
  images         String[]
  rating         Float?
  isCustomizable Boolean
  reviewIds      String[]   @db.ObjectId
  reviews        Review[]
  categoryIDs    String[]   @db.ObjectId
  categories     Category[] @relation("productCategories", fields: [categoryIDs], references: [id])
  onCartUsers    User[]     @relation("productsOnCart", fields: [onCartUserIds], references: [id])
  onCartUserIds  String[]   @db.ObjectId
  orders         Order[]    @relation(fields: [orderIds], references: [id])
  orderIds       String[]   @db.ObjectId
}

model Review {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  rating    Float
  message   String?
}

model Category {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  products   Product[] @relation("productCategories", fields: [productIds], references: [id])
  productIds String[]  @db.ObjectId
}

enum OrderStatus {
  SUCCESS
  FAILED
  PENDING
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  COD
  UPI
  ONLINE_BANKING
  OTHER
}

model Order {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  userId           String        @db.ObjectId
  user             User          @relation(fields: [userId], references: [id])
  productIds       String[]      @db.ObjectId
  products         Product[]     @relation(fields: [productIds], references: [id])
  totalPrice       Float
  appliedDiscounts Float
  status           OrderStatus   @default(PENDING)
  paymentMethod    PaymentMethod
}

type Entry {
  type       PaymentMethod
  identifier String?
  isVarified Boolean?
}

model Wallet {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  userId  String  @db.ObjectId
  User    User?
  entries Entry[]
}
